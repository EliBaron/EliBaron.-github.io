<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Elibaron</title>
  
  <subtitle>自古万事皆成空,何人能够尽从容</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-17T09:42:53.108Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Elibaron</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/05/30/hello-world/"/>
    <id>http://yoursite.com/2019/05/30/hello-world/</id>
    <published>2019-05-30T02:40:59.000Z</published>
    <updated>2019-09-17T09:42:53.108Z</updated>
    
    <content type="html"><![CDATA[<p>本文整理自一个真实的案例，是楼主负责的业务，在一次大促之前的压测时发现了这个问题，在每次大促之前，我们的测试人员都会对网站进行压力测试，这个时候会查看服务的cpu、内存、load、rt、qps等指标。在一次压测过程中，测试人员发现我们的某一个接口，在qps上升到500以后，CPU使用率急剧升高。</p><a id="more"></a><p>问题发现</p><p>CPU利用率，又称CPU使用率。顾名思义，CPU利用率是来描述CPU的使用情况的，表明了一段时间内CPU被占用的情况。使用率越高，说明你的机器在这个时间上运行了很多程序，反之较少</p><p>问题定位</p><p>遇到这种问题，首先是登录到服务器，看一下具体情况。</p><p>定位进程</p><p>登录服务器，执行top命令，查看CPU占用情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span>top</span><br><span class="line">   PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</span><br><span class="line">  1893 admin     20   0 7127m 2.6g  38m S 181.7 32.6  10:20.26 java</span><br><span class="line">  </span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。</span><br><span class="line"></span><br><span class="line">通过以上命令，我们可以看到，进程ID为1893的Java进程的CPU占用率达到了181%，基本可以定位到是我们的Java应用导致整个服务器的CPU占用率飙升。</span><br><span class="line"></span><br><span class="line">定位线程</span><br><span class="line"></span><br><span class="line">我们知道，Java是单进程多线程的，那么，我们接下来看看PID=1893的这个Java进程中的各个线程的CPU使用情况，同样是用top命令：</span><br><span class="line">    </span><br><span class="line">```shell</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>top -Hp 1893</span><br><span class="line">   PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</span><br><span class="line">   4519 admin     20   0 7127m 2.6g  38m R 18.6 32.6   0:40.11 java</span><br><span class="line">   </span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">通过top -Hp 1893命令，我们可以发现，当前1893这个进程中，ID为4519的线程占用CPU最高。</span><br><span class="line"></span><br><span class="line">定位代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过top命令，我们目前已经定位到导致CPU使用率较高的具体线程，那么我么接下来就定位下到底是哪一行代码存在问题。</span><br><span class="line">    </span><br><span class="line">首先，我们需要把4519这个线程转成16进制：</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line"><span class="meta">$</span>printf %x 4519</span><br><span class="line">11a7</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">接下来，通过jstack命令，查看栈信息：</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>sudo -u admin  jstack 1893 |grep -A 200 11a7</span><br><span class="line">"HSFBizProcessor-DEFAULT-8-thread-5" #500 daemon prio=10 os_prio=0 tid=0x00007f632314a800 nid=0x11a2 runnable [0x000000005442a000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">  at sun.misc.URLClassPath$Loader.findResource(URLClassPath.java:684)</span><br><span class="line">  at sun.misc.URLClassPath.findResource(URLClassPath.java:188)</span><br><span class="line">  at java.net.URLClassLoader$2.run(URLClassLoader.java:569)</span><br><span class="line">  at java.net.URLClassLoader$2.run(URLClassLoader.java:567)</span><br><span class="line">  at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">  at java.net.URLClassLoader.findResource(URLClassLoader.java:566)</span><br><span class="line">  at java.lang.ClassLoader.getResource(ClassLoader.java:1093)</span><br><span class="line">  at java.net.URLClassLoader.getResourceAsStream(URLClassLoader.java:232)</span><br><span class="line">  at org.hibernate.validator.internal.xml.ValidationXmlParser.getInputStreamForPath(ValidationXmlParser.java:248)</span><br><span class="line">  at org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:191)</span><br><span class="line">  at org.hibernate.validator.internal.xml.ValidationXmlParser.parseValidationXml(ValidationXmlParser.java:65)</span><br><span class="line">  at org.hibernate.validator.internal.engine.ConfigurationImpl.parseValidationXml(ConfigurationImpl.java:287)</span><br><span class="line">  at org.hibernate.validator.internal.engine.ConfigurationImpl.buildValidatorFactory(ConfigurationImpl.java:174)</span><br><span class="line">  at javax.validation.Validation.buildDefaultValidatorFactory(Validation.java:111)</span><br><span class="line">  at com.test.common.util.BeanValidator.validate(BeanValidator.java:30)</span><br><span class="line">  </span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">通过以上代码，我们可以清楚的看到，BeanValidator.java的第30行是有可能存在问题的。</span><br><span class="line"></span><br><span class="line">问题解决</span><br><span class="line"></span><br><span class="line">接下来就是通过查看代码来解决问题了，我们发现，我们自定义了一个BeanValidator，封装了Hibernate的Validator，然后在validate方法中，通过Validation.buildDefaultValidatorFactory().getValidator()初始化一个Validator实例，通过分析发现这个实例化的过程比较耗时。我们重构了一下代码，把Validator实例的初始化提到方法外，在类初始化的时候创建一次就解决了问题。</span><br><span class="line"></span><br><span class="line">总结</span><br><span class="line"></span><br><span class="line">以上，展示了一次比较完成的线上问题定位过程。主要用到的命令有:top 、printf 和 jstack。另外，线上问题排查还可以使用Alibaba开源的工具Arthas进行排查，以上问题，可以使用一下命令定位：</span><br><span class="line">    </span><br><span class="line">```shell</span><br><span class="line"></span><br><span class="line">thread -n 3 //查看cpu占比前三的线程</span><br></pre></td></tr></table></figure><p>以上，本文介绍了如何排查线上服务器CPU使用率过高的问题，如果大家感兴趣，后面可以再介绍一些关于LOAD飙高、频繁GC等问题的排查手段。关于本次问题排查，你有什么想说的呢？欢迎交流。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文整理自一个真实的案例，是楼主负责的业务，在一次大促之前的压测时发现了这个问题，在每次大促之前，我们的测试人员都会对网站进行压力测试，这个时候会查看服务的cpu、内存、load、rt、qps等指标。在一次压测过程中，测试人员发现我们的某一个接口，在qps上升到500以后，CPU使用率急剧升高。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>服务器宕机如何处理</title>
    <link href="http://yoursite.com/2019/05/30/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%95%E6%9C%BA/"/>
    <id>http://yoursite.com/2019/05/30/服务器宕机/</id>
    <published>2019-05-30T02:40:59.000Z</published>
    <updated>2019-09-17T09:42:44.655Z</updated>
    
    <content type="html"><![CDATA[<p>本文整理自一个真实的案例，是楼主负责的业务，在一次大促之前的压测时发现了这个问题，在每次大促之前，我们的测试人员都会对网站进行压力测试，这个时候会查看服务的cpu、内存、load、rt、qps等指标。在一次压测过程中，测试人员发现我们的某一个接口，在qps上升到500以后，CPU使用率急剧升高。</p><a id="more"></a><p>问题发现</p><p>CPU利用率，又称CPU使用率。顾名思义，CPU利用率是来描述CPU的使用情况的，表明了一段时间内CPU被占用的情况。使用率越高，说明你的机器在这个时间上运行了很多程序，反之较少</p><p>问题定位</p><p>遇到这种问题，首先是登录到服务器，看一下具体情况。</p><p>定位进程</p><p>登录服务器，执行top命令，查看CPU占用情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span>top</span><br><span class="line">   PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</span><br><span class="line">  1893 admin     20   0 7127m 2.6g  38m S 181.7 32.6  10:20.26 java</span><br><span class="line">  </span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。</span><br><span class="line"></span><br><span class="line">通过以上命令，我们可以看到，进程ID为1893的Java进程的CPU占用率达到了181%，基本可以定位到是我们的Java应用导致整个服务器的CPU占用率飙升。</span><br><span class="line"></span><br><span class="line">定位线程</span><br><span class="line"></span><br><span class="line">我们知道，Java是单进程多线程的，那么，我们接下来看看PID=1893的这个Java进程中的各个线程的CPU使用情况，同样是用top命令：</span><br><span class="line">    </span><br><span class="line">```shell</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>top -Hp 1893</span><br><span class="line">   PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</span><br><span class="line">   4519 admin     20   0 7127m 2.6g  38m R 18.6 32.6   0:40.11 java</span><br><span class="line">   </span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">通过top -Hp 1893命令，我们可以发现，当前1893这个进程中，ID为4519的线程占用CPU最高。</span><br><span class="line"></span><br><span class="line">定位代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过top命令，我们目前已经定位到导致CPU使用率较高的具体线程，那么我么接下来就定位下到底是哪一行代码存在问题。</span><br><span class="line">    </span><br><span class="line">首先，我们需要把4519这个线程转成16进制：</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line"><span class="meta">$</span>printf %x 4519</span><br><span class="line">11a7</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">接下来，通过jstack命令，查看栈信息：</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span>sudo -u admin  jstack 1893 |grep -A 200 11a7</span><br><span class="line">"HSFBizProcessor-DEFAULT-8-thread-5" #500 daemon prio=10 os_prio=0 tid=0x00007f632314a800 nid=0x11a2 runnable [0x000000005442a000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">  at sun.misc.URLClassPath$Loader.findResource(URLClassPath.java:684)</span><br><span class="line">  at sun.misc.URLClassPath.findResource(URLClassPath.java:188)</span><br><span class="line">  at java.net.URLClassLoader$2.run(URLClassLoader.java:569)</span><br><span class="line">  at java.net.URLClassLoader$2.run(URLClassLoader.java:567)</span><br><span class="line">  at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">  at java.net.URLClassLoader.findResource(URLClassLoader.java:566)</span><br><span class="line">  at java.lang.ClassLoader.getResource(ClassLoader.java:1093)</span><br><span class="line">  at java.net.URLClassLoader.getResourceAsStream(URLClassLoader.java:232)</span><br><span class="line">  at org.hibernate.validator.internal.xml.ValidationXmlParser.getInputStreamForPath(ValidationXmlParser.java:248)</span><br><span class="line">  at org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:191)</span><br><span class="line">  at org.hibernate.validator.internal.xml.ValidationXmlParser.parseValidationXml(ValidationXmlParser.java:65)</span><br><span class="line">  at org.hibernate.validator.internal.engine.ConfigurationImpl.parseValidationXml(ConfigurationImpl.java:287)</span><br><span class="line">  at org.hibernate.validator.internal.engine.ConfigurationImpl.buildValidatorFactory(ConfigurationImpl.java:174)</span><br><span class="line">  at javax.validation.Validation.buildDefaultValidatorFactory(Validation.java:111)</span><br><span class="line">  at com.test.common.util.BeanValidator.validate(BeanValidator.java:30)</span><br><span class="line">  </span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">通过以上代码，我们可以清楚的看到，BeanValidator.java的第30行是有可能存在问题的。</span><br><span class="line"></span><br><span class="line">问题解决</span><br><span class="line"></span><br><span class="line">接下来就是通过查看代码来解决问题了，我们发现，我们自定义了一个BeanValidator，封装了Hibernate的Validator，然后在validate方法中，通过Validation.buildDefaultValidatorFactory().getValidator()初始化一个Validator实例，通过分析发现这个实例化的过程比较耗时。我们重构了一下代码，把Validator实例的初始化提到方法外，在类初始化的时候创建一次就解决了问题。</span><br><span class="line"></span><br><span class="line">总结</span><br><span class="line"></span><br><span class="line">以上，展示了一次比较完成的线上问题定位过程。主要用到的命令有:top 、printf 和 jstack。另外，线上问题排查还可以使用Alibaba开源的工具Arthas进行排查，以上问题，可以使用一下命令定位：</span><br><span class="line">    </span><br><span class="line">```shell</span><br><span class="line"></span><br><span class="line">thread -n 3 //查看cpu占比前三的线程</span><br></pre></td></tr></table></figure><p>以上，本文介绍了如何排查线上服务器CPU使用率过高的问题，如果大家感兴趣，后面可以再介绍一些关于LOAD飙高、频繁GC等问题的排查手段。关于本次问题排查，你有什么想说的呢？欢迎交流。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文整理自一个真实的案例，是楼主负责的业务，在一次大促之前的压测时发现了这个问题，在每次大促之前，我们的测试人员都会对网站进行压力测试，这个时候会查看服务的cpu、内存、load、rt、qps等指标。在一次压测过程中，测试人员发现我们的某一个接口，在qps上升到500以后，CPU使用率急剧升高。&lt;/p&gt;
    
    </summary>
    
      <category term="技术控" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%8E%A7/"/>
    
    
      <category term="宕机" scheme="http://yoursite.com/tags/%E5%AE%95%E6%9C%BA/"/>
    
  </entry>
  
</feed>
